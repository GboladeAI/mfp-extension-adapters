/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/*
 * Natural Language Understanding
 * Analyze various features of text content at scale. Provide text, raw HTML, or a public URL, and IBM Watson Natural Language Understanding will give you results for the features you request. The service cleans HTML content before analysis by default, so the results can ignore most advertisements and other unwanted content.    ### Concepts  Identify general concepts that are referenced or alluded to in your content. Concepts that are detected typically have an associated link to a DBpedia resource.    ### Entities  Detect important people, places, geopolitical entities and other types of entities in your content. Entity detection recognizes consecutive coreferences of each entity. For example, analysis of the following text would count \"Barack Obama\" and \"He\" as the same entity:    \"Barack Obama was the 44th President of the United States. He took office in January 2009.\"    ### Keywords  Determine the most important keywords in your content. Keyword phrases are organized by relevance in the results.    ### Categories  Categorize your content into a hierarchical 5-level taxonomy. For example, \"Leonardo DiCaprio won an Oscar\" returns \"/art and entertainment/movies and tv/movies\" as the most confident classification.    ### Sentiment  Determine whether your content conveys postive or negative sentiment. Sentiment information can be returned for detected entities, keywords, or user-specified target phrases found in the text.    ### Emotion  Detect anger, disgust, fear, joy, or sadness that is conveyed by your content. Emotion information can be returned for detected entities, keywords, or user-specified target phrases found in the text.    ### Relations  Recognize when two entities are related, and identify the type of relation.  For example, you can identify an \"awardedTo\" relation between an award and its recipient.    ### Semantic Roles  Parse sentences into subject-action-object form, and identify entities and keywords that are subjects or objects of an action.    ### Metadata  Get author information, publication date, and the title of your text/HTML content.  
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.DisambiguationResult;
import com.ibm.mfp.adapters.sample.model.EmotionScores;
import com.ibm.mfp.adapters.sample.model.FeatureSentimentResults;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import javax.validation.constraints.*;

/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/**
 * The important people, places, geopolitical entities and other types of entities in your content
 */
@ApiModel(description = "The important people, places, geopolitical entities and other types of entities in your content")
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-09-04T17:58:15.838+05:30")
public class EntitiesResult   {
  @JsonProperty("type")
  private String type = null;

  @JsonProperty("relevance")
  private BigDecimal relevance = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("text")
  private String text = null;

  @JsonProperty("emotion")
  private EmotionScores emotion = null;

  @JsonProperty("sentiment")
  private FeatureSentimentResults sentiment = null;

  @JsonProperty("disambiguation")
  private DisambiguationResult disambiguation = null;

  public EntitiesResult type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Entity type
   * @return type
  **/
  @JsonProperty("type")
  @ApiModelProperty(value = "Entity type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public EntitiesResult relevance(BigDecimal relevance) {
    this.relevance = relevance;
    return this;
  }

   /**
   * Relevance score from 0 to 1. Higher values indicate greater relevance
   * @return relevance
  **/
  @JsonProperty("relevance")
  @ApiModelProperty(value = "Relevance score from 0 to 1. Higher values indicate greater relevance")
  public BigDecimal getRelevance() {
    return relevance;
  }

  public void setRelevance(BigDecimal relevance) {
    this.relevance = relevance;
  }

  public EntitiesResult count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * How many times the entity was mentioned in the text
   * @return count
  **/
  @JsonProperty("count")
  @ApiModelProperty(value = "How many times the entity was mentioned in the text")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public EntitiesResult text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The name of the entity
   * @return text
  **/
  @JsonProperty("text")
  @ApiModelProperty(value = "The name of the entity")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public EntitiesResult emotion(EmotionScores emotion) {
    this.emotion = emotion;
    return this;
  }

   /**
   * Emotion analysis results for the entity, enabled with the \"emotion\" option
   * @return emotion
  **/
  @JsonProperty("emotion")
  @ApiModelProperty(value = "Emotion analysis results for the entity, enabled with the \"emotion\" option")
  public EmotionScores getEmotion() {
    return emotion;
  }

  public void setEmotion(EmotionScores emotion) {
    this.emotion = emotion;
  }

  public EntitiesResult sentiment(FeatureSentimentResults sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * Sentiment analysis results for the entity, enabled with the \"sentiment\" option
   * @return sentiment
  **/
  @JsonProperty("sentiment")
  @ApiModelProperty(value = "Sentiment analysis results for the entity, enabled with the \"sentiment\" option")
  public FeatureSentimentResults getSentiment() {
    return sentiment;
  }

  public void setSentiment(FeatureSentimentResults sentiment) {
    this.sentiment = sentiment;
  }

  public EntitiesResult disambiguation(DisambiguationResult disambiguation) {
    this.disambiguation = disambiguation;
    return this;
  }

   /**
   * Disambiguation information for the entity
   * @return disambiguation
  **/
  @JsonProperty("disambiguation")
  @ApiModelProperty(value = "Disambiguation information for the entity")
  public DisambiguationResult getDisambiguation() {
    return disambiguation;
  }

  public void setDisambiguation(DisambiguationResult disambiguation) {
    this.disambiguation = disambiguation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitiesResult entitiesResult = (EntitiesResult) o;
    return Objects.equals(this.type, entitiesResult.type) &&
        Objects.equals(this.relevance, entitiesResult.relevance) &&
        Objects.equals(this.count, entitiesResult.count) &&
        Objects.equals(this.text, entitiesResult.text) &&
        Objects.equals(this.emotion, entitiesResult.emotion) &&
        Objects.equals(this.sentiment, entitiesResult.sentiment) &&
        Objects.equals(this.disambiguation, entitiesResult.disambiguation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, relevance, count, text, emotion, sentiment, disambiguation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitiesResult {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    relevance: ").append(toIndentedString(relevance)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    emotion: ").append(toIndentedString(emotion)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    disambiguation: ").append(toIndentedString(disambiguation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

