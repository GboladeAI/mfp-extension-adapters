/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/*
 * Natural Language Understanding
 * Analyze various features of text content at scale. Provide text, raw HTML, or a public URL, and IBM Watson Natural Language Understanding will give you results for the features you request. The service cleans HTML content before analysis by default, so the results can ignore most advertisements and other unwanted content.    ### Concepts  Identify general concepts that are referenced or alluded to in your content. Concepts that are detected typically have an associated link to a DBpedia resource.    ### Entities  Detect important people, places, geopolitical entities and other types of entities in your content. Entity detection recognizes consecutive coreferences of each entity. For example, analysis of the following text would count \"Barack Obama\" and \"He\" as the same entity:    \"Barack Obama was the 44th President of the United States. He took office in January 2009.\"    ### Keywords  Determine the most important keywords in your content. Keyword phrases are organized by relevance in the results.    ### Categories  Categorize your content into a hierarchical 5-level taxonomy. For example, \"Leonardo DiCaprio won an Oscar\" returns \"/art and entertainment/movies and tv/movies\" as the most confident classification.    ### Sentiment  Determine whether your content conveys postive or negative sentiment. Sentiment information can be returned for detected entities, keywords, or user-specified target phrases found in the text.    ### Emotion  Detect anger, disgust, fear, joy, or sadness that is conveyed by your content. Emotion information can be returned for detected entities, keywords, or user-specified target phrases found in the text.    ### Relations  Recognize when two entities are related, and identify the type of relation.  For example, you can identify an \"awardedTo\" relation between an award and its recipient.    ### Semantic Roles  Parse sentences into subject-action-object form, and identify entities and keywords that are subjects or objects of an action.    ### Metadata  Get author information, publication date, and the title of your text/HTML content.  
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.CategoriesOptions;
import com.ibm.mfp.adapters.sample.model.ConceptsOptions;
import com.ibm.mfp.adapters.sample.model.EmotionOptions;
import com.ibm.mfp.adapters.sample.model.EntitiesOptions;
import com.ibm.mfp.adapters.sample.model.KeywordsOptions;
import com.ibm.mfp.adapters.sample.model.MetadataOptions;
import com.ibm.mfp.adapters.sample.model.RelationsOptions;
import com.ibm.mfp.adapters.sample.model.SemanticRolesOptions;
import com.ibm.mfp.adapters.sample.model.SentimentOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/**
 * Analysis features and options
 */
@ApiModel(description = "Analysis features and options")
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-06-21T18:50:49.993+05:30")
public class Features   {
  @JsonProperty("concepts")
  private ConceptsOptions concepts = null;

  @JsonProperty("emotion")
  private EmotionOptions emotion = null;

  @JsonProperty("entities")
  private EntitiesOptions entities = null;

  @JsonProperty("keywords")
  private KeywordsOptions keywords = null;

  @JsonProperty("metadata")
  private MetadataOptions metadata = null;

  @JsonProperty("relations")
  private RelationsOptions relations = null;

  @JsonProperty("semantic_roles")
  private SemanticRolesOptions semanticRoles = null;

  @JsonProperty("sentiment")
  private SentimentOptions sentiment = null;

  @JsonProperty("categories")
  private CategoriesOptions categories = null;

  public Features concepts(ConceptsOptions concepts) {
    this.concepts = concepts;
    return this;
  }

   /**
   * Whether or not to return the concepts that are mentioned in the analyzed text
   * @return concepts
  **/
  @JsonProperty("concepts")
  @ApiModelProperty(value = "Whether or not to return the concepts that are mentioned in the analyzed text")
  public ConceptsOptions getConcepts() {
    return concepts;
  }

  public void setConcepts(ConceptsOptions concepts) {
    this.concepts = concepts;
  }

  public Features emotion(EmotionOptions emotion) {
    this.emotion = emotion;
    return this;
  }

   /**
   * Whether or not to extract the emotions implied in the analyzed text
   * @return emotion
  **/
  @JsonProperty("emotion")
  @ApiModelProperty(value = "Whether or not to extract the emotions implied in the analyzed text")
  public EmotionOptions getEmotion() {
    return emotion;
  }

  public void setEmotion(EmotionOptions emotion) {
    this.emotion = emotion;
  }

  public Features entities(EntitiesOptions entities) {
    this.entities = entities;
    return this;
  }

   /**
   * Whether or not to extract detected entity objects from the analyzed text
   * @return entities
  **/
  @JsonProperty("entities")
  @ApiModelProperty(value = "Whether or not to extract detected entity objects from the analyzed text")
  public EntitiesOptions getEntities() {
    return entities;
  }

  public void setEntities(EntitiesOptions entities) {
    this.entities = entities;
  }

  public Features keywords(KeywordsOptions keywords) {
    this.keywords = keywords;
    return this;
  }

   /**
   * Whether or not to return the keywords in the analyzed text
   * @return keywords
  **/
  @JsonProperty("keywords")
  @ApiModelProperty(value = "Whether or not to return the keywords in the analyzed text")
  public KeywordsOptions getKeywords() {
    return keywords;
  }

  public void setKeywords(KeywordsOptions keywords) {
    this.keywords = keywords;
  }

  public Features metadata(MetadataOptions metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Whether or not the author, publication date, and title of the analyzed text should be returned. This parameter is only available for URL and HTML input
   * @return metadata
  **/
  @JsonProperty("metadata")
  @ApiModelProperty(value = "Whether or not the author, publication date, and title of the analyzed text should be returned. This parameter is only available for URL and HTML input")
  public MetadataOptions getMetadata() {
    return metadata;
  }

  public void setMetadata(MetadataOptions metadata) {
    this.metadata = metadata;
  }

  public Features relations(RelationsOptions relations) {
    this.relations = relations;
    return this;
  }

   /**
   * Whether or not to return the relationships between detected entities in the analyzed text
   * @return relations
  **/
  @JsonProperty("relations")
  @ApiModelProperty(value = "Whether or not to return the relationships between detected entities in the analyzed text")
  public RelationsOptions getRelations() {
    return relations;
  }

  public void setRelations(RelationsOptions relations) {
    this.relations = relations;
  }

  public Features semanticRoles(SemanticRolesOptions semanticRoles) {
    this.semanticRoles = semanticRoles;
    return this;
  }

   /**
   * Whether or not to return the subject-action-object relations from the analyzed text
   * @return semanticRoles
  **/
  @JsonProperty("semantic_roles")
  @ApiModelProperty(value = "Whether or not to return the subject-action-object relations from the analyzed text")
  public SemanticRolesOptions getSemanticRoles() {
    return semanticRoles;
  }

  public void setSemanticRoles(SemanticRolesOptions semanticRoles) {
    this.semanticRoles = semanticRoles;
  }

  public Features sentiment(SentimentOptions sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * Whether or not to return the overall sentiment of the analyzed text
   * @return sentiment
  **/
  @JsonProperty("sentiment")
  @ApiModelProperty(value = "Whether or not to return the overall sentiment of the analyzed text")
  public SentimentOptions getSentiment() {
    return sentiment;
  }

  public void setSentiment(SentimentOptions sentiment) {
    this.sentiment = sentiment;
  }

  public Features categories(CategoriesOptions categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Whether or not to return the high level category the content is categorized as (i.e. news, art)
   * @return categories
  **/
  @JsonProperty("categories")
  @ApiModelProperty(value = "Whether or not to return the high level category the content is categorized as (i.e. news, art)")
  public CategoriesOptions getCategories() {
    return categories;
  }

  public void setCategories(CategoriesOptions categories) {
    this.categories = categories;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Features features = (Features) o;
    return Objects.equals(this.concepts, features.concepts) &&
        Objects.equals(this.emotion, features.emotion) &&
        Objects.equals(this.entities, features.entities) &&
        Objects.equals(this.keywords, features.keywords) &&
        Objects.equals(this.metadata, features.metadata) &&
        Objects.equals(this.relations, features.relations) &&
        Objects.equals(this.semanticRoles, features.semanticRoles) &&
        Objects.equals(this.sentiment, features.sentiment) &&
        Objects.equals(this.categories, features.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concepts, emotion, entities, keywords, metadata, relations, semanticRoles, sentiment, categories);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Features {\n");
    
    sb.append("    concepts: ").append(toIndentedString(concepts)).append("\n");
    sb.append("    emotion: ").append(toIndentedString(emotion)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    semanticRoles: ").append(toIndentedString(semanticRoles)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

