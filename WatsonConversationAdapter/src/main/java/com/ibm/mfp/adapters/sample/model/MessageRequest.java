/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/*
 * Conversation
 * The IBM Watson&trade; Conversation service combines machine learning, natural language understanding, and integrated dialog tools to create conversation flows between your apps and your users.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.Context;
import com.ibm.mfp.adapters.sample.model.InputData;
import com.ibm.mfp.adapters.sample.model.OutputData;
import com.ibm.mfp.adapters.sample.model.RuntimeEntity;
import com.ibm.mfp.adapters.sample.model.RuntimeIntent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/**
 * A request formatted for the Conversation service.
 */
@ApiModel(description = "A request formatted for the Conversation service.")
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-09-04T16:39:33.075+05:30")
public class MessageRequest   {
  @JsonProperty("input")
  private InputData input = null;

  @JsonProperty("alternate_intents")
  private Boolean alternateIntents = false;

  @JsonProperty("context")
  private Context context = null;

  @JsonProperty("entities")
  private List<RuntimeEntity> entities = null;

  @JsonProperty("intents")
  private List<RuntimeIntent> intents = null;

  @JsonProperty("output")
  private OutputData output = null;

  public MessageRequest input(InputData input) {
    this.input = input;
    return this;
  }

   /**
   * An input object that includes the input text.
   * @return input
  **/
  @JsonProperty("input")
  @ApiModelProperty(value = "An input object that includes the input text.")
  public InputData getInput() {
    return input;
  }

  public void setInput(InputData input) {
    this.input = input;
  }

  public MessageRequest alternateIntents(Boolean alternateIntents) {
    this.alternateIntents = alternateIntents;
    return this;
  }

   /**
   * Whether to return more than one intent. Set to `true` to return all matching intents.
   * @return alternateIntents
  **/
  @JsonProperty("alternate_intents")
  @ApiModelProperty(value = "Whether to return more than one intent. Set to `true` to return all matching intents.")
  public Boolean getAlternateIntents() {
    return alternateIntents;
  }

  public void setAlternateIntents(Boolean alternateIntents) {
    this.alternateIntents = alternateIntents;
  }

  public MessageRequest context(Context context) {
    this.context = context;
    return this;
  }

   /**
   * State information for the conversation. Continue a conversation by including the context object from the previous response.
   * @return context
  **/
  @JsonProperty("context")
  @ApiModelProperty(value = "State information for the conversation. Continue a conversation by including the context object from the previous response.")
  public Context getContext() {
    return context;
  }

  public void setContext(Context context) {
    this.context = context;
  }

  public MessageRequest entities(List<RuntimeEntity> entities) {
    this.entities = entities;
    return this;
  }

  public MessageRequest addEntitiesItem(RuntimeEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<RuntimeEntity>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them.
   * @return entities
  **/
  @JsonProperty("entities")
  @ApiModelProperty(value = "Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them.")
  public List<RuntimeEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<RuntimeEntity> entities) {
    this.entities = entities;
  }

  public MessageRequest intents(List<RuntimeIntent> intents) {
    this.intents = intents;
    return this;
  }

  public MessageRequest addIntentsItem(RuntimeIntent intentsItem) {
    if (this.intents == null) {
      this.intents = new ArrayList<RuntimeIntent>();
    }
    this.intents.add(intentsItem);
    return this;
  }

   /**
   * An array of name-confidence pairs for the user input. Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them.
   * @return intents
  **/
  @JsonProperty("intents")
  @ApiModelProperty(value = "An array of name-confidence pairs for the user input. Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them.")
  public List<RuntimeIntent> getIntents() {
    return intents;
  }

  public void setIntents(List<RuntimeIntent> intents) {
    this.intents = intents;
  }

  public MessageRequest output(OutputData output) {
    this.output = output;
    return this;
  }

   /**
   * System output. Include the output from the request when you have several requests within the same Dialog turn to pass back in the intermediate information.
   * @return output
  **/
  @JsonProperty("output")
  @ApiModelProperty(value = "System output. Include the output from the request when you have several requests within the same Dialog turn to pass back in the intermediate information.")
  public OutputData getOutput() {
    return output;
  }

  public void setOutput(OutputData output) {
    this.output = output;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageRequest messageRequest = (MessageRequest) o;
    return Objects.equals(this.input, messageRequest.input) &&
        Objects.equals(this.alternateIntents, messageRequest.alternateIntents) &&
        Objects.equals(this.context, messageRequest.context) &&
        Objects.equals(this.entities, messageRequest.entities) &&
        Objects.equals(this.intents, messageRequest.intents) &&
        Objects.equals(this.output, messageRequest.output);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, alternateIntents, context, entities, intents, output);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageRequest {\n");
    
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    alternateIntents: ").append(toIndentedString(alternateIntents)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

