/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/*
 * Tone Analyzer
 * ### Service Overview The IBM Watson&trade; Tone Analyzer service uses linguistic analysis to detect emotional, social, and language tones in written text. The service can analyze tone at both the document and sentence levels. You can use the service to understand how your written communications are perceived and then to improve the tone of your communications. Businesses can use the service to learn the tone of their customers' communications and to respond to each customer appropriately, or to understand and improve their customer conversations. ### API Usage The following information provides details about using the service to analyze tone: * **The tone method:** The service offers `GET` and `POST /v3/tone` methods that use the general purpose endpoint to analyze the tone of input content. The methods accept a maximum of 128 KB of content in JSON, plain text, or HTML format. * **The tone_chat method:** The service offers a `POST /v3/tone_chat` method that uses the customer engagement endpoint to analyze the tone of customer service and customer support conversations. The method accepts a maximum of 128 KB of content in JSON format. * **Authentication:** You authenticate to the service by using your service credentials. You can use your credentials to authenticate via a proxy server that resides in Bluemix, or you can use your credentials to obtain a token and contact the service directly. See [Service credentials for Watson services](https://console.bluemix.net/docs/services/watson/getting-started-credentials.html) and [Tokens for authentication](https://console.bluemix.net/docs/services/watson/getting-started-tokens.html). * **Request Logging:** By default, all Watson services log requests and their results. Data is collected only to improve the Watson services. If you do not want to share your data, set the header parameter `X-Watson-Learning-Opt-Out` to `true` for each request. Data is collected for any request that omits this header. See [Controlling request logging for Watson services](https://console.bluemix.net/docs/services/watson/getting-started-logging.html).   For more information about the service, see [About Tone Analyzer](https://console.bluemix.net/docs/services/tone-analyzer/index.html).
 *
 * OpenAPI spec version: 3.3.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.ToneScore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/**
 * ToneCategory
 */
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-10-03T17:26:51.394+05:30")
public class ToneCategory   {
  @JsonProperty("tones")
  private List<ToneScore> tones = new ArrayList<ToneScore>();

  @JsonProperty("category_id")
  private String categoryId = null;

  @JsonProperty("category_name")
  private String categoryName = null;

  public ToneCategory tones(List<ToneScore> tones) {
    this.tones = tones;
    return this;
  }

  public ToneCategory addTonesItem(ToneScore tonesItem) {
    this.tones.add(tonesItem);
    return this;
  }

   /**
   * An array of `ToneScore` objects that provides the results for the tones of the category.
   * @return tones
  **/
  @JsonProperty("tones")
  @ApiModelProperty(required = true, value = "An array of `ToneScore` objects that provides the results for the tones of the category.")
  @NotNull
  public List<ToneScore> getTones() {
    return tones;
  }

  public void setTones(List<ToneScore> tones) {
    this.tones = tones;
  }

  public ToneCategory categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The unique, non-localized identifier of the category for the results. The service can return results for the following category IDs: `emotion_tone`, `language_tone`, and `social_tone`.
   * @return categoryId
  **/
  @JsonProperty("category_id")
  @ApiModelProperty(required = true, value = "The unique, non-localized identifier of the category for the results. The service can return results for the following category IDs: `emotion_tone`, `language_tone`, and `social_tone`.")
  @NotNull
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }

  public ToneCategory categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * The user-visible, localized name of the category.
   * @return categoryName
  **/
  @JsonProperty("category_name")
  @ApiModelProperty(required = true, value = "The user-visible, localized name of the category.")
  @NotNull
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToneCategory toneCategory = (ToneCategory) o;
    return Objects.equals(this.tones, toneCategory.tones) &&
        Objects.equals(this.categoryId, toneCategory.categoryId) &&
        Objects.equals(this.categoryName, toneCategory.categoryName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tones, categoryId, categoryName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToneCategory {\n");
    
    sb.append("    tones: ").append(toIndentedString(tones)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

