/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/*
 * Discovery
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.EnrichmentOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/*
 *  IBM Confidential OCO Source Materials
 *                                                                 
 *  5725-I43 Copyright IBM Corp. 2011, 2017
 *                                                                   
 *  The source code for this program is not published or otherwise
 *  divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *                   
 */


/**
 * Enrichment
 */
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-09-04T17:22:26.527+05:30")
public class Enrichment   {
  @JsonProperty("description")
  private String description = "";

  @JsonProperty("destination_field")
  private String destinationField = null;

  @JsonProperty("source_field")
  private String sourceField = null;

  @JsonProperty("overwrite")
  private Boolean overwrite = false;

  @JsonProperty("enrichment")
  private String enrichment = null;

  @JsonProperty("ignore_downstream_errors")
  private Boolean ignoreDownstreamErrors = false;

  @JsonProperty("options")
  private EnrichmentOptions options = null;

  public Enrichment description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Describes what the enrichment step does
   * @return description
  **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Describes what the enrichment step does")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Enrichment destinationField(String destinationField) {
    this.destinationField = destinationField;
    return this;
  }

   /**
   * Field where enrichments will be stored. This field must already exist or be at most 1 level deeper than an existing field. For example, if `text` is a top-level field with no sub-fields, `text.foo` is a valid destination but `text.foo.bar` is not.
   * @return destinationField
  **/
  @JsonProperty("destination_field")
  @ApiModelProperty(required = true, value = "Field where enrichments will be stored. This field must already exist or be at most 1 level deeper than an existing field. For example, if `text` is a top-level field with no sub-fields, `text.foo` is a valid destination but `text.foo.bar` is not.")
  @NotNull
  public String getDestinationField() {
    return destinationField;
  }

  public void setDestinationField(String destinationField) {
    this.destinationField = destinationField;
  }

  public Enrichment sourceField(String sourceField) {
    this.sourceField = sourceField;
    return this;
  }

   /**
   * Field to be enriched.
   * @return sourceField
  **/
  @JsonProperty("source_field")
  @ApiModelProperty(required = true, value = "Field to be enriched.")
  @NotNull
  public String getSourceField() {
    return sourceField;
  }

  public void setSourceField(String sourceField) {
    this.sourceField = sourceField;
  }

  public Enrichment overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

   /**
   * Indicates that the enrichments will overwrite the destination_field field if it already exists.
   * @return overwrite
  **/
  @JsonProperty("overwrite")
  @ApiModelProperty(value = "Indicates that the enrichments will overwrite the destination_field field if it already exists.")
  public Boolean getOverwrite() {
    return overwrite;
  }

  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }

  public Enrichment enrichment(String enrichment) {
    this.enrichment = enrichment;
    return this;
  }

   /**
   * Name of the enrichment service to call. Currently the only valid value is `alchemy_language`.
   * @return enrichment
  **/
  @JsonProperty("enrichment")
  @ApiModelProperty(required = true, value = "Name of the enrichment service to call. Currently the only valid value is `alchemy_language`.")
  @NotNull
  public String getEnrichment() {
    return enrichment;
  }

  public void setEnrichment(String enrichment) {
    this.enrichment = enrichment;
  }

  public Enrichment ignoreDownstreamErrors(Boolean ignoreDownstreamErrors) {
    this.ignoreDownstreamErrors = ignoreDownstreamErrors;
    return this;
  }

   /**
   * If true, then most errors generated during the enrichment process will be treated as warnings and wil not cause the document to fail processing.
   * @return ignoreDownstreamErrors
  **/
  @JsonProperty("ignore_downstream_errors")
  @ApiModelProperty(value = "If true, then most errors generated during the enrichment process will be treated as warnings and wil not cause the document to fail processing.")
  public Boolean getIgnoreDownstreamErrors() {
    return ignoreDownstreamErrors;
  }

  public void setIgnoreDownstreamErrors(Boolean ignoreDownstreamErrors) {
    this.ignoreDownstreamErrors = ignoreDownstreamErrors;
  }

  public Enrichment options(EnrichmentOptions options) {
    this.options = options;
    return this;
  }

   /**
   * A list of options specific to the enrichment
   * @return options
  **/
  @JsonProperty("options")
  @ApiModelProperty(value = "A list of options specific to the enrichment")
  public EnrichmentOptions getOptions() {
    return options;
  }

  public void setOptions(EnrichmentOptions options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Enrichment enrichment = (Enrichment) o;
    return Objects.equals(this.description, enrichment.description) &&
        Objects.equals(this.destinationField, enrichment.destinationField) &&
        Objects.equals(this.sourceField, enrichment.sourceField) &&
        Objects.equals(this.overwrite, enrichment.overwrite) &&
        Objects.equals(this.enrichment, enrichment.enrichment) &&
        Objects.equals(this.ignoreDownstreamErrors, enrichment.ignoreDownstreamErrors) &&
        Objects.equals(this.options, enrichment.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, destinationField, sourceField, overwrite, enrichment, ignoreDownstreamErrors, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Enrichment {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationField: ").append(toIndentedString(destinationField)).append("\n");
    sb.append("    sourceField: ").append(toIndentedString(sourceField)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    enrichment: ").append(toIndentedString(enrichment)).append("\n");
    sb.append("    ignoreDownstreamErrors: ").append(toIndentedString(ignoreDownstreamErrors)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

