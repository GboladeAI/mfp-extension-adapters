/*
 * Discovery
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.HtmlSettings;
import com.ibm.mfp.adapters.sample.model.Normalizations;
import com.ibm.mfp.adapters.sample.model.PdfSettings;
import com.ibm.mfp.adapters.sample.model.WordSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * Document conversion settings
 */
@ApiModel(description = "Document conversion settings")
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-05-19T15:47:02.385+05:30")
public class Conversions   {
  @JsonProperty("pdf")
  private PdfSettings pdf = null;

  @JsonProperty("word")
  private WordSettings word = null;

  @JsonProperty("html")
  private HtmlSettings html = null;

  @JsonProperty("json_normalizations")
  private Normalizations jsonNormalizations = null;

  public Conversions pdf(PdfSettings pdf) {
    this.pdf = pdf;
    return this;
  }

   /**
   * A list of PDF conversion settings
   * @return pdf
  **/
  @JsonProperty("pdf")
  @ApiModelProperty(value = "A list of PDF conversion settings")

  public PdfSettings getPdf() {
    return pdf;
  }

  public void setPdf(PdfSettings pdf) {
    this.pdf = pdf;
  }

  public Conversions word(WordSettings word) {
    this.word = word;
    return this;
  }

   /**
   * A list of Word conversion settings
   * @return word
  **/
  @JsonProperty("word")
  @ApiModelProperty(value = "A list of Word conversion settings")

  public WordSettings getWord() {
    return word;
  }

  public void setWord(WordSettings word) {
    this.word = word;
  }

  public Conversions html(HtmlSettings html) {
    this.html = html;
    return this;
  }

   /**
   * A list of HTML conversion settings
   * @return html
  **/
  @JsonProperty("html")
  @ApiModelProperty(value = "A list of HTML conversion settings")

  public HtmlSettings getHtml() {
    return html;
  }

  public void setHtml(HtmlSettings html) {
    this.html = html;
  }

  public Conversions jsonNormalizations(Normalizations jsonNormalizations) {
    this.jsonNormalizations = jsonNormalizations;
    return this;
  }

   /**
   * An array of JSON normalization operations
   * @return jsonNormalizations
  **/
  @JsonProperty("json_normalizations")
  @ApiModelProperty(value = "An array of JSON normalization operations")

  public Normalizations getJsonNormalizations() {
    return jsonNormalizations;
  }

  public void setJsonNormalizations(Normalizations jsonNormalizations) {
    this.jsonNormalizations = jsonNormalizations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversions conversions = (Conversions) o;
    return Objects.equals(this.pdf, conversions.pdf) &&
        Objects.equals(this.word, conversions.word) &&
        Objects.equals(this.html, conversions.html) &&
        Objects.equals(this.jsonNormalizations, conversions.jsonNormalizations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pdf, word, html, jsonNormalizations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversions {\n");
    
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    jsonNormalizations: ").append(toIndentedString(jsonNormalizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
