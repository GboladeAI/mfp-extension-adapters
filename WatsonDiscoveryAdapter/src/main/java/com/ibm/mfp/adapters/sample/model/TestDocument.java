/*
 * Discovery
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.mfp.adapters.sample.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.ibm.mfp.adapters.sample.model.DocumentSnapshot;
import com.ibm.mfp.adapters.sample.model.Notice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * TestDocument
 */
@javax.annotation.Generated(value = "com.github.mfpdev.adapters.swagger.codegen.MfpAdapterCodegen", date = "2017-05-15T10:26:38.328+05:30")
public class TestDocument   {
  @JsonProperty("configuration_id")
  private String configurationId = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("enriched_field_units")
  private BigDecimal enrichedFieldUnits = null;

  @JsonProperty("original_media_type")
  private String originalMediaType = null;

  @JsonProperty("snapshots")
  private List<DocumentSnapshot> snapshots = null;

  @JsonProperty("notices")
  private List<Notice> notices = null;

  public TestDocument configurationId(String configurationId) {
    this.configurationId = configurationId;
    return this;
  }

   /**
   * Get configurationId
   * @return configurationId
  **/
  @JsonProperty("configuration_id")
  @ApiModelProperty(value = "")

  public String getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(String configurationId) {
    this.configurationId = configurationId;
  }

  public TestDocument status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @JsonProperty("status")
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public TestDocument enrichedFieldUnits(BigDecimal enrichedFieldUnits) {
    this.enrichedFieldUnits = enrichedFieldUnits;
    return this;
  }

   /**
   * The number of 10 Kilobytes of field data that was enriched. This can be used to estimate the cost of running a real ingestion.
   * @return enrichedFieldUnits
  **/
  @JsonProperty("enriched_field_units")
  @ApiModelProperty(value = "The number of 10 Kilobytes of field data that was enriched. This can be used to estimate the cost of running a real ingestion.")

  public BigDecimal getEnrichedFieldUnits() {
    return enrichedFieldUnits;
  }

  public void setEnrichedFieldUnits(BigDecimal enrichedFieldUnits) {
    this.enrichedFieldUnits = enrichedFieldUnits;
  }

  public TestDocument originalMediaType(String originalMediaType) {
    this.originalMediaType = originalMediaType;
    return this;
  }

   /**
   * Format of the test document
   * @return originalMediaType
  **/
  @JsonProperty("original_media_type")
  @ApiModelProperty(value = "Format of the test document")

  public String getOriginalMediaType() {
    return originalMediaType;
  }

  public void setOriginalMediaType(String originalMediaType) {
    this.originalMediaType = originalMediaType;
  }

  public TestDocument snapshots(List<DocumentSnapshot> snapshots) {
    this.snapshots = snapshots;
    return this;
  }

  public TestDocument addSnapshotsItem(DocumentSnapshot snapshotsItem) {
    if (this.snapshots == null) {
      this.snapshots = new ArrayList<DocumentSnapshot>();
    }
    this.snapshots.add(snapshotsItem);
    return this;
  }

   /**
   * Get snapshots
   * @return snapshots
  **/
  @JsonProperty("snapshots")
  @ApiModelProperty(value = "")

  public List<DocumentSnapshot> getSnapshots() {
    return snapshots;
  }

  public void setSnapshots(List<DocumentSnapshot> snapshots) {
    this.snapshots = snapshots;
  }

  public TestDocument notices(List<Notice> notices) {
    this.notices = notices;
    return this;
  }

  public TestDocument addNoticesItem(Notice noticesItem) {
    if (this.notices == null) {
      this.notices = new ArrayList<Notice>();
    }
    this.notices.add(noticesItem);
    return this;
  }

   /**
   * Get notices
   * @return notices
  **/
  @JsonProperty("notices")
  @ApiModelProperty(value = "")

  public List<Notice> getNotices() {
    return notices;
  }

  public void setNotices(List<Notice> notices) {
    this.notices = notices;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestDocument testDocument = (TestDocument) o;
    return Objects.equals(this.configurationId, testDocument.configurationId) &&
        Objects.equals(this.status, testDocument.status) &&
        Objects.equals(this.enrichedFieldUnits, testDocument.enrichedFieldUnits) &&
        Objects.equals(this.originalMediaType, testDocument.originalMediaType) &&
        Objects.equals(this.snapshots, testDocument.snapshots) &&
        Objects.equals(this.notices, testDocument.notices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, status, enrichedFieldUnits, originalMediaType, snapshots, notices);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestDocument {\n");
    
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enrichedFieldUnits: ").append(toIndentedString(enrichedFieldUnits)).append("\n");
    sb.append("    originalMediaType: ").append(toIndentedString(originalMediaType)).append("\n");
    sb.append("    snapshots: ").append(toIndentedString(snapshots)).append("\n");
    sb.append("    notices: ").append(toIndentedString(notices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
